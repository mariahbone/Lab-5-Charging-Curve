{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from __future__ import division\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "#-------------------------------------------#\n",
    "#Data Section - Create Arrays for data. Perform necessary calculations\n",
    "#CHANGE THE VARIABLE NAMES and numbers to match your data\n",
    "xvariable_changeme = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]) #what are units?\n",
    "yvariable_changeme = np.array([3.5, 6.0, 7.77, 8.91, 9.67, 10.21, 10.58, 10.83, 11.01, 11.12, 11.20, 11.25]) #what are units?\n",
    "\n",
    "\n",
    "#--------------------------------------------#\n",
    "#Re-assign variables as x, y, dy so that the following code may remain generic\n",
    "\n",
    "x = xvariable_changeme   #this should be the array you want to plot on the x axis\n",
    "y = yvariable_changeme\n",
    "\n",
    "#-----------------------------------------------------------------------#\n",
    "#Plot data on graph. Plot error bars and place values for slope, error in slope and goodness of fit on the plot using \"annotate\"\n",
    "plt.figure(figsize=(15,10))\n",
    " \n",
    "plt.scatter(x, y, color='blue', marker='o')\n",
    " \n",
    " \n",
    "#create labels  YOU NEED TO CHANGE THESE!!!\n",
    "plt.xlabel('time_seconds')\n",
    "plt.ylabel('voltage')\n",
    "plt.title('RC_Circuit_Charging_Curve')\n",
    "\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
